@page "/"
@using Lenia.Client.Components
@implements IDisposable

<PageTitle>Lenia</PageTitle>

<MudAppBar Elevation="1">
    <MudIcon Icon="@Icons.Material.Filled.Biotech" Style="margin-right: 10px;" />
    <MudText Typo="Typo.h6">Lenia - Artificial Life Simulation</MudText>
    <MudSpacer />
    <MudIconButton Icon="@(isRunning ? Icons.Material.Filled.Pause : Icons.Material.Filled.PlayArrow)"
                   Color="Color.Inherit" 
                   OnClick="TogglePlayPause" />
</MudAppBar>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Elevation="2" Class="pa-4">
                <LeniaCanvas @ref="leniaCanvas" Width="600" Height="600" Lenia="lenia" />
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudStack Spacing="3">
                    
                    <!-- Control Buttons -->
                    <MudStack Row Spacing="2">
                        <MudButton Variant="Variant.Filled" 
                                   Color="@(isRunning ? Color.Error : Color.Success)"
                                   StartIcon="@(isRunning ? Icons.Material.Filled.Pause : Icons.Material.Filled.PlayArrow)"
                                   OnClick="TogglePlayPause">
                            @(isRunning ? "Pause" : "Play")
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="Reset">
                            Reset
                        </MudButton>
                    </MudStack>
                    
                    <!-- Grid Size Controls -->
                    <MudExpansionPanels Elevation="0">
                        <MudExpansionPanel Text="Grid Settings">
                            <MudStack Spacing="2">
                                <MudSlider T="int" 
                                           Value="gridSize" 
                                           Min="24" Max="128" Step="8"
                                           ValueLabel="true"
                                           ValueLabelFormat="{0}x{0}"
                                           ValueChanged="OnGridSizeChanged">
                                    Grid Size
                                </MudSlider>
                                
                                <MudSwitch @bind-Value="lenia.UseAdaptiveQuality" 
                                           Label="Adaptive Quality" 
                                           Color="Color.Primary" />
                                
                                <MudText Typo="Typo.caption">
                                    Processing Quality: @lenia.ProcessingQuality%
                                </MudText>
                            </MudStack>
                        </MudExpansionPanel>
                        
                        <MudExpansionPanel Text="Pattern Presets">
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Text" OnClick="InitializeCircle">Circle</MudButton>
                                <MudButton Variant="Variant.Text" OnClick="InitializeOrbium">Orbium</MudButton>
                                <MudButton Variant="Variant.Text" OnClick="InitializeGeminium">Geminium</MudButton>
                            </MudStack>
                        </MudExpansionPanel>
                        
                        <MudExpansionPanel Text="Physics Parameters">
                            <MudStack Spacing="2">
                                <MudSlider T="float" 
                                           @bind-Value="lenia.R" 
                                           Min="2.0f" Max="10.0f" Step="0.1f"
                                           ValueLabel="true"
                                           ValueLabelFormat="R: {0:F1}">
                                    Radius (R)
                                </MudSlider>
                                
                                <MudSlider T="float" 
                                           @bind-Value="lenia.DeltaT" 
                                           Min="0.01f" Max="0.5f" Step="0.01f"
                                           ValueLabel="true"
                                           ValueLabelFormat="Δt: {0:F2}">
                                    Time Step (Δt)
                                </MudSlider>
                                
                                <MudSlider T="float" 
                                           @bind-Value="lenia.Mu" 
                                           Min="0.0f" Max="0.5f" Step="0.001f"
                                           ValueLabel="true"
                                           ValueLabelFormat="μ: {0:F3}">
                                    Growth μ
                                </MudSlider>
                                
                                <MudSlider T="float" 
                                           @bind-Value="lenia.Sigma" 
                                           Min="0.001f" Max="0.1f" Step="0.001f"
                                           ValueLabel="true"
                                           ValueLabelFormat="σ: {0:F3}">
                                    Growth σ
                                </MudSlider>
                            </MudStack>
                        </MudExpansionPanel>
                        
                        <MudExpansionPanel Text="Performance">
                            <MudStack Spacing="2">
                                <MudSlider T="int" 
                                           Value="targetFps" 
                                           Min="10" Max="120" Step="5"
                                           ValueLabel="true"
                                           ValueLabelFormat="Target: {0} FPS"
                                           ValueChanged="OnFpsChanged">
                                    Target FPS
                                </MudSlider>
                                
                                <MudPaper Class="pa-3" Style="background-color: #f5f5f5;">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.body2">
                                            <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Small" />
                                            Actual FPS: <strong>@actualFps.ToString("F1")</strong>
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            <MudIcon Icon="@Icons.Material.Filled.Update" Size="Size.Small" />
                                            Update Time: <strong>@updateTimeMs.ToString("F1")</strong> ms
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" />
                                            Render Time: <strong>@renderTimeMs.ToString("F1")</strong> ms
                                        </MudText>
                                    </MudStack>
                                </MudPaper>
                            </MudStack>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private LeniaScalable lenia = new(32, 32, 60);
    private LeniaCanvas? leniaCanvas;
    private bool isRunning = false;
    private int targetFps = 60;
    private int gridSize = 32;
    private Timer? updateTimer;
    
    private double actualFps = 0;
    private double updateTimeMs = 0;
    private double renderTimeMs = 0;
    private DateTime lastFrameTime = DateTime.Now;
    private int frameCount = 0;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartAnimation();
        }
    }
    
    private void TogglePlayPause()
    {
        isRunning = !isRunning;
    }
    
    private void Reset()
    {
        lenia = new LeniaScalable(gridSize, gridSize, targetFps);
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeCircle()
    {
        lenia.InitializeCircle(gridSize / 2, gridSize / 2, gridSize / 6);
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void OnGridSizeChanged(int newSize)
    {
        gridSize = newSize;
        lenia.ResizeGrid(gridSize, gridSize);
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeOrbium()
    {
        lenia.InitializeOrbium();
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeGeminium()
    {
        lenia.InitializeGeminium();
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void OnFpsChanged(int newFps)
    {
        targetFps = newFps;
        lenia.SetTargetFPS(targetFps);
        RestartTimer();
    }
    
    private void RestartTimer()
    {
        updateTimer?.Dispose();
        if (targetFps > 0)
        {
            updateTimer = new Timer(async (_) =>
            {
                if (isRunning)
                {
                    var sw = System.Diagnostics.Stopwatch.StartNew();
                    lenia.Update();
                    sw.Stop();
                    updateTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    sw.Restart();
                    await InvokeAsync(async () => await RenderFrame());
                    sw.Stop();
                    renderTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    UpdateFpsCounter();
                }
            }, null, 0, (long)(1000 / targetFps));
        }
    }
    
    private void UpdateFpsCounter()
    {
        frameCount++;
        var now = DateTime.Now;
        var elapsed = (now - lastFrameTime).TotalSeconds;
        
        if (elapsed >= 1.0)
        {
            actualFps = frameCount / elapsed;
            frameCount = 0;
            lastFrameTime = now;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private Task StartAnimation()
    {
        RestartTimer();
        return Task.CompletedTask;
    }
    
    private async Task RenderFrame()
    {
        if (leniaCanvas != null)
        {
            await leniaCanvas.RenderFrame();
        }
    }
    
    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}