@page "/"
@using Lenia.Client.Components
@implements IDisposable

<PageTitle>Lenia</PageTitle>

<h1>Lenia - Artificial Life Simulation</h1>

<div class="container">
    <div class="controls">
        <button class="btn btn-primary" @onclick="TogglePlayPause">
            @(isRunning ? "Pause" : "Play")
        </button>
        <button class="btn btn-secondary" @onclick="Reset">Reset</button>
        
        <div class="pattern-buttons">
            <h4>Patterns:</h4>
            <button class="btn btn-secondary" @onclick="InitializeCircle">Circle</button>
            <button class="btn btn-secondary" @onclick="InitializeOrbium">Orbium</button>
            <button class="btn btn-secondary" @onclick="InitializeGeminium">Geminium</button>
        </div>
        
        <div class="parameter-group">
            <label>
                Radius (R): <span>@lenia.R.ToString("F1")</span>
                <input type="range" min="5" max="25" step="0.5" @bind="lenia.R" />
            </label>
            
            <label>
                Time Step (Δt): <span>@lenia.DeltaT.ToString("F2")</span>
                <input type="range" min="0.01" max="0.5" step="0.01" @bind="lenia.DeltaT" />
            </label>
            
            <label>
                Growth μ: <span>@lenia.Mu.ToString("F3")</span>
                <input type="range" min="0" max="0.5" step="0.001" @bind="lenia.Mu" />
            </label>
            
            <label>
                Growth σ: <span>@lenia.Sigma.ToString("F3")</span>
                <input type="range" min="0.001" max="0.1" step="0.001" @bind="lenia.Sigma" />
            </label>
            
            <label>
                Kernel α: <span>@lenia.KernelAlpha.ToString("F1")</span>
                <input type="range" min="1" max="10" step="0.1" @bind="lenia.KernelAlpha" />
            </label>
        </div>
        
        <div>
            <label>
                Speed (FPS): <span>@targetFps</span>
                <input type="range" min="1" max="60" @bind="targetFps" @oninput="OnFpsChanged" />
            </label>
        </div>
        
        <div class="performance-info">
            <h4>Performance:</h4>
            <p>Actual FPS: <span>@actualFps.ToString("F1")</span></p>
            <p>Update Time: <span>@updateTimeMs.ToString("F1")</span> ms</p>
            <p>Render Time: <span>@renderTimeMs.ToString("F1")</span> ms</p>
        </div>
    </div>
    
    <LeniaCanvas @ref="leniaCanvas" Width="600" Height="600" Lenia="lenia" />
</div>

<style>
    .container {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }
    
    .controls {
        display: flex;
        flex-direction: column;
        gap: 10px;
        min-width: 300px;
    }
    
    .parameter-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    
    .parameter-group label {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }
    
    .parameter-group input[type="range"] {
        width: 100%;
    }
    
    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }
    
    .btn-primary {
        background-color: #007bff;
        color: white;
    }
    
    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }
    
    .btn:hover {
        opacity: 0.9;
    }
    
    .pattern-buttons {
        display: flex;
        flex-direction: column;
        gap: 5px;
        margin-top: 10px;
    }
    
    .pattern-buttons h4 {
        margin: 0 0 5px 0;
    }
    
    .performance-info {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f8f9fa;
    }
    
    .performance-info h4 {
        margin: 0 0 10px 0;
    }
    
    .performance-info p {
        margin: 5px 0;
        font-family: monospace;
    }
</style>

@code {
    private LeniaCore lenia = new(100, 100);
    private LeniaCanvas? leniaCanvas;
    private bool isRunning = false;
    private int targetFps = 30;
    private Timer? updateTimer;
    
    private double actualFps = 0;
    private double updateTimeMs = 0;
    private double renderTimeMs = 0;
    private DateTime lastFrameTime = DateTime.Now;
    private int frameCount = 0;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartAnimation();
        }
    }
    
    private void TogglePlayPause()
    {
        isRunning = !isRunning;
    }
    
    private void Reset()
    {
        lenia = new LeniaCore(100, 100);
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeCircle()
    {
        lenia.InitializeCircle(50, 50, 20);
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeOrbium()
    {
        lenia.InitializeOrbium();
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void InitializeGeminium()
    {
        lenia.InitializeGeminium();
        InvokeAsync(async () => await RenderFrame());
    }
    
    private void OnFpsChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newFps))
        {
            targetFps = newFps;
            RestartTimer();
        }
    }
    
    private void RestartTimer()
    {
        updateTimer?.Dispose();
        if (targetFps > 0)
        {
            updateTimer = new Timer(async (_) =>
            {
                if (isRunning)
                {
                    var sw = System.Diagnostics.Stopwatch.StartNew();
                    lenia.Update();
                    sw.Stop();
                    updateTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    sw.Restart();
                    await InvokeAsync(async () => await RenderFrame());
                    sw.Stop();
                    renderTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    UpdateFpsCounter();
                }
            }, null, 0, 1000 / targetFps);
        }
    }
    
    private void UpdateFpsCounter()
    {
        frameCount++;
        var now = DateTime.Now;
        var elapsed = (now - lastFrameTime).TotalSeconds;
        
        if (elapsed >= 1.0)
        {
            actualFps = frameCount / elapsed;
            frameCount = 0;
            lastFrameTime = now;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private Task StartAnimation()
    {
        RestartTimer();
        return Task.CompletedTask;
    }
    
    private async Task RenderFrame()
    {
        if (leniaCanvas != null)
        {
            await leniaCanvas.RenderFrame();
        }
    }
    
    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}