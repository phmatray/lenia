@page "/"
@using Lenia.Client.Components
@implements IDisposable

<PageTitle>Lenia</PageTitle>

<MudLayout>
    <MudAppBar Fixed="true" Dense="true" Elevation="2">
        <MudIcon Icon="@Icons.Material.Filled.Biotech" Style="margin-right: 10px;" />
        <MudText Typo="Typo.h6">Lenia - Artificial Life Simulation</MudText>
        <MudSpacer />
        <MudChip T="string" 
                 Icon="@Icons.Material.Filled.Speed" 
                 Color="Color.Success" 
                 Size="Size.Small" 
                 Variant="Variant.Text">
            @_actualFps.ToString("F0") FPS
        </MudChip>
        <MudIconButton Icon="@(_isRunning ? Icons.Material.Filled.Pause : Icons.Material.Filled.PlayArrow)"
                       Color="@(_isRunning ? Color.Warning : Color.Success)" 
                       Size="Size.Large"
                       OnClick="TogglePlayPause" />
    </MudAppBar>
    
    <MudMainContent Class="pa-0">
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 mt-4">
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Elevation="2" Class="pa-4">
                <LeniaCanvas @ref="_leniaCanvas" Width="600" Height="600" Lenia="_lenia" />
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" lg="4">
            <MudPaper Elevation="2" Class="pa-0" Style="height: calc(100vh - 120px); overflow-y: auto;">
                <MudStack Spacing="0">
                    <MudPaper Elevation="1" Class="pa-4">
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
                            Controls
                        </MudText>
                    </MudPaper>
                    
                    <div Class="pa-4">
                    <MudStack Spacing="4">
                        
                        <!-- Quick Actions -->
                        <MudCard Elevation="1">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">
                                        <MudIcon Icon="@Icons.Material.Filled.PlayCircleOutline" Class="mr-2" />
                                        Actions
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Row Spacing="2" Justify="Justify.SpaceEvenly">
                                    <MudButton Variant="Variant.Outlined" 
                                               StartIcon="@Icons.Material.Filled.Refresh"
                                               Color="Color.Secondary"
                                               Size="Size.Small"
                                               OnClick="Reset">
                                        Reset
                                    </MudButton>
                                    <MudButton Variant="Variant.Outlined" 
                                               StartIcon="@Icons.Material.Filled.Clear"
                                               Color="Color.Warning"
                                               Size="Size.Small"
                                               OnClick="Clear">
                                        Clear
                                    </MudButton>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                        
                        <!-- Pattern Presets -->
                        <MudCard Elevation="1">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">
                                        <MudIcon Icon="@Icons.Material.Filled.Pattern" Class="mr-2" />
                                        Patterns
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="4">
                                        <MudButton Variant="Variant.Outlined" 
                                                   FullWidth="true"
                                                   Size="Size.Small"
                                                   OnClick="InitializeCircle">
                                            Circle
                                        </MudButton>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudButton Variant="Variant.Outlined" 
                                                   FullWidth="true"
                                                   Size="Size.Small"
                                                   OnClick="InitializeOrbium">
                                            Orbium
                                        </MudButton>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudButton Variant="Variant.Outlined" 
                                                   FullWidth="true"
                                                   Size="Size.Small"
                                                   OnClick="InitializeGeminium">
                                            Geminium
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                        
                        <!-- Grid Settings -->
                        <MudCard Elevation="1">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">
                                        <MudIcon Icon="@Icons.Material.Filled.GridOn" Class="mr-2" />
                                        Grid Settings
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Spacing="3">
                                    <MudSlider T="int" 
                                               Value="_gridSize" 
                                               Min="24" Max="128" Step="8"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0}×{0}"
                                               ValueChanged="OnGridSizeChanged"
                                               Color="Color.Primary">
                                        <MudText Typo="Typo.body2">Grid Size</MudText>
                                    </MudSlider>
                                    
                                    <MudSwitch Value="_lenia.UseAdaptiveQuality"
                                               ValueChanged="@((bool value) => OnAdaptiveQualityChanged(value))"
                                               Label="Adaptive Quality" 
                                               Color="Color.Primary" />
                                    
                                    <MudAlert Severity="Severity.Info" Dense="true" NoIcon="true">
                                        Quality: @_lenia.ProcessingQuality%
                                    </MudAlert>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                        
                        <!-- Physics Parameters -->
                        <MudCard Elevation="1">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">
                                        <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
                                        Physics
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Spacing="3">
                                    <MudSlider T="float" 
                                               @bind-Value="_lenia.R" 
                                               Min="2.0f" Max="10.0f" Step="0.1f"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0:F1}"
                                               Color="Color.Secondary">
                                        <MudText Typo="Typo.body2">Radius (R)</MudText>
                                    </MudSlider>
                                    
                                    <MudSlider T="float" 
                                               @bind-Value="_lenia.DeltaT" 
                                               Min="0.01f" Max="0.5f" Step="0.01f"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0:F2}"
                                               Color="Color.Secondary">
                                        <MudText Typo="Typo.body2">Time Step (Δt)</MudText>
                                    </MudSlider>
                                    
                                    <MudSlider T="float" 
                                               @bind-Value="_lenia.Mu" 
                                               Min="0.0f" Max="0.5f" Step="0.001f"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0:F3}"
                                               Color="Color.Tertiary">
                                        <MudText Typo="Typo.body2">Growth μ</MudText>
                                    </MudSlider>
                                    
                                    <MudSlider T="float" 
                                               @bind-Value="_lenia.Sigma" 
                                               Min="0.001f" Max="0.1f" Step="0.001f"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0:F3}"
                                               Color="Color.Tertiary">
                                        <MudText Typo="Typo.body2">Growth σ</MudText>
                                    </MudSlider>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                        
                        <!-- Performance -->
                        <MudCard Elevation="1">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">
                                        <MudIcon Icon="@Icons.Material.Filled.Speed" Class="mr-2" />
                                        Performance
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Spacing="3">
                                    <MudSlider T="int" 
                                               Value="_targetFps" 
                                               Min="10" Max="120" Step="5"
                                               ValueLabel="true"
                                               ValueLabelFormat="{0} FPS"
                                               ValueChanged="OnFpsChanged"
                                               Color="Color.Success">
                                        <MudText Typo="Typo.body2">Target FPS</MudText>
                                    </MudSlider>
                                    
                                    <MudPaper Class="pa-3" Elevation="0">
                                        <MudStack Spacing="2">
                                            <MudGrid>
                                                <MudItem xs="4">
                                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">FPS</MudText>
                                                    <MudText Typo="Typo.h6" Color="@GetFpsColor()">
                                                        @_actualFps.ToString("F0")
                                                    </MudText>
                                                </MudItem>
                                                <MudItem xs="4">
                                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Update</MudText>
                                                    <MudText Typo="Typo.body2">
                                                        @_updateTimeMs.ToString("F0")ms
                                                    </MudText>
                                                </MudItem>
                                                <MudItem xs="4">
                                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">Render</MudText>
                                                    <MudText Typo="Typo.body2">
                                                        @_renderTimeMs.ToString("F0")ms
                                                    </MudText>
                                                </MudItem>
                                            </MudGrid>
                                        </MudStack>
                                    </MudPaper>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                        
                    </MudStack>
                    </div>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private LeniaScalable _lenia = new(32, 32, 60);
    private LeniaCanvas? _leniaCanvas;
    private bool _isRunning;
    private int _targetFps = 60;
    private int _gridSize = 32;
    private Timer? _updateTimer;
    
    private double _actualFps;
    private double _updateTimeMs;
    private double _renderTimeMs;
    private DateTime _lastFrameTime = DateTime.Now;
    private int _frameCount;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartAnimation();
        }
    }
    
    private void TogglePlayPause()
    {
        _isRunning = !_isRunning;
        StateHasChanged();
    }
    
    private void Reset()
    {
        _lenia = new LeniaScalable(_gridSize, _gridSize, _targetFps);
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void Clear()
    {
        _lenia.Clear();
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void InitializeCircle()
    {
        _lenia.InitializeCircle(_gridSize / 2, _gridSize / 2, _gridSize / 6);
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void OnGridSizeChanged(int newSize)
    {
        _gridSize = newSize;
        _lenia.ResizeGrid(_gridSize, _gridSize);
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void InitializeOrbium()
    {
        _lenia.InitializeOrbium();
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void InitializeGeminium()
    {
        _lenia.InitializeGeminium();
        InvokeAsync(async () => 
        {
            await RenderFrame();
            StateHasChanged();
        });
    }
    
    private void OnFpsChanged(int newFps)
    {
        _targetFps = newFps;
        _lenia.SetTargetFPS(_targetFps);
        RestartTimer();
    }
    
    private void OnAdaptiveQualityChanged(bool newValue)
    {
        _lenia.UseAdaptiveQuality = newValue;
        StateHasChanged();
    }
    
    private void RestartTimer()
    {
        _updateTimer?.Dispose();
        if (_targetFps > 0)
        {
            _updateTimer = new Timer(async (_) =>
            {
                if (_isRunning)
                {
                    var sw = System.Diagnostics.Stopwatch.StartNew();
                    _lenia.Update();
                    sw.Stop();
                    _updateTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    sw.Restart();
                    await InvokeAsync(async () => await RenderFrame());
                    sw.Stop();
                    _renderTimeMs = sw.Elapsed.TotalMilliseconds;
                    
                    UpdateFpsCounter();
                }
            }, null, 0, (long)(1000 / _targetFps));
        }
    }
    
    private void UpdateFpsCounter()
    {
        _frameCount++;
        var now = DateTime.Now;
        var elapsed = (now - _lastFrameTime).TotalSeconds;
        
        if (elapsed >= 1.0)
        {
            _actualFps = _frameCount / elapsed;
            _frameCount = 0;
            _lastFrameTime = now;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private Task StartAnimation()
    {
        RestartTimer();
        return Task.CompletedTask;
    }
    
    private async Task RenderFrame()
    {
        if (_leniaCanvas != null)
        {
            await _leniaCanvas.RenderFrame();
        }
    }
    
    private Color GetFpsColor()
    {
        return _actualFps switch
        {
            >= 50 => Color.Success,
            >= 30 => Color.Warning,
            _ => Color.Error
        };
    }
    
    public void Dispose()
    {
        _updateTimer?.Dispose();
    }
}