@using Lenia.Client.Models
@implements IAsyncDisposable
@inject IJSRuntime Js

<canvas @ref="_canvasElement" width="@Width" height="@Height" class="@CanvasClass" style="background-color: #000;"></canvas>

@code {
    [Parameter] public int Width { get; set; } = 600;
    [Parameter] public int Height { get; set; } = 600;
    [Parameter] public LeniaScalable? Lenia { get; set; }
    [Parameter] public string CanvasClass { get; set; } = "";
    
    private ElementReference _canvasElement;
    private IJSObjectReference? _canvasModule;
    private DotNetObjectReference<LeniaCanvas>? _objRef;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            _canvasModule = await Js.InvokeAsync<IJSObjectReference>("import", "./leniaCanvas.js");
            await _canvasModule.InvokeVoidAsync("initializeCanvas", _canvasElement, _objRef);
        }
    }
    
    public async Task SetColorScheme(ColorScheme? scheme)
    {
        if (_canvasModule != null && scheme != null)
        {
            var colors = scheme.Colors.Select(c => new { r = c.R, g = c.G, b = c.B }).ToArray();
            Console.WriteLine($"=== C# SETTING COLOR SCHEME ===");
            Console.WriteLine($"Scheme: {scheme.Name} with {colors.Length} colors");
            Console.WriteLine($"First color: R={colors[0].r}, G={colors[0].g}, B={colors[0].b}");
            Console.WriteLine($"Last color: R={colors[^1].r}, G={colors[^1].g}, B={colors[^1].b}");
            Console.WriteLine($"===============================");
            
            await _canvasModule.InvokeVoidAsync("setColorScheme", colors);
            
            // Re-render the frame with the new color scheme
            if (Lenia != null)
            {
                await RenderFrame();
            }
        }
        else
        {
            Console.WriteLine($"SetColorScheme failed: canvasModule={_canvasModule != null}, scheme={scheme?.Name ?? "null"}");
        }
    }
    
    public async Task RenderFrame()
    {
        if (_canvasModule != null && Lenia != null)
        {
            var grid = Lenia.GetGrid();
            await _canvasModule.InvokeVoidAsync("renderGrid", grid, Lenia.Width, Lenia.Height);
        }
    }
    
    public async Task<string?> DownloadImage(string filename)
    {
        if (_canvasModule != null)
        {
            await _canvasModule.InvokeVoidAsync("downloadCanvas", filename);
        }
        return null;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_canvasModule != null)
        {
            await _canvasModule.DisposeAsync();
        }
        _objRef?.Dispose();
    }
}